# -*- coding: utf-8 -*-
"""Sentiment_Analysis_NLP_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YgivvEhXQ4J43b7C2rjvGY3LlEZ1MKol
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv(r'/content/sentiment_tweets3.csv.zip')

df=df.drop('Index',axis=1)
df.head()

df.rename(columns={'message to examine': 'Comments'}, inplace=True)
df.rename(columns={'label (depression result)': 'Label'}, inplace=True)

df

df.shape,

df["Label"].value_counts()

X = df[['Comments']]
y = df['Label']

from imblearn.over_sampling import RandomOverSampler
ros = RandomOverSampler(random_state=42)
X_resampled, y_resampled = ros.fit_resample(X, y)

y_resampled.value_counts()

"""# **Text Cleaning**"""

import nltk
import re
from nltk.stem.porter import PorterStemmer
from nltk.corpus import stopwords

nltk.download('stopwords')
stopword_set = set(stopwords.words('english'))
emoji_pattern = re.compile(r'(?::|;|=)(?:-)?(?:\)|\(|D|P)')
def preprocess_text(text):
    # Remove HTML tags
    text = re.sub(r'<[^>]*>', '', text)

    # Extract emojis
    emojis = emoji_pattern.findall(text)

    # Remove non-word characters (keeps only words and spaces)
    text = re.sub(r'\W+', ' ', text.lower())

    # Tokenization and stemming
    porter = PorterStemmer()
    words = [porter.stem(word) for word in text.split() if word not in stopword_set]

    # Append emojis to the processed text
    return " ".join(words) + " " + " ".join(emojis)

preprocess_text('this is moving  saqib khan falling playing skzxndkjwnedwkjcnskj hellow hoe kashif ')

df['Comments']=df['Comments'].apply(preprocess_text)
df['Comments'][0]

"""# **Vectorization**"""

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf=TfidfVectorizer(stop_words="english")
x=tfidf.fit_transform(df['Comments'])
y=df['Label']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from sklearn.linear_model import LogisticRegressionCV
lr=LogisticRegressionCV(cv=5,scoring='accuracy',random_state=42,n_jobs=-1,verbose=3)
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)

from sklearn.metrics import accuracy_score
print("Accuracy = ",accuracy_score(y_test,y_pred)*100,"%")

"""# **App Making Streamlit**"""

import joblib

# Save the TF-IDF vectorizer
tfidf_path = "/content/tfidf.joblib"
joblib.dump(tfidf, tfidf_path)
print("âœ… TF-IDF Vectorizer saved successfully!")


joblib.dump(lr, '/content/Sentiment_Analysis_NLP.joblib')

!pip install streamlit
!pip install pyngrok

!streamlit run /content/app.py &> /content/logs.txt &

df["Comments"][10310]

!npx localtunnel --port 8501

